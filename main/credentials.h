/*

Credentials file

*/

#pragma once

// Only one of these settings must be defined
#define USE_ABP
//#define USE_OTAA

#ifdef USE_ABP

    // unlessnz-mapper-003
    // LoRaWAN NwkSKey, network session key
//  static const u1_t PROGMEM NWKSKEY[16] = { 0x45, 0x63, 0x04, 0xE0, 0x6C, 0xAC, 0x38, 0x85, 0x72, 0x82, 0x75, 0x2A, 0x25, 0xBA, 0x5F, 0x20 };
    // LoRaWAN AppSKey, application session key
//  static const u1_t PROGMEM APPSKEY[16] = { 0x3C, 0x4D, 0x37, 0x75, 0x56, 0x7A, 0xDE, 0xDA, 0x98, 0x9E, 0xE2, 0xCC, 0x24, 0xD1, 0x3F, 0xF8 };
    // LoRaWAN end-device address (DevAddr)
    // This has to be unique for every node
//  static const u4_t DEVADDR = 0x260DB98D;

    
    // unlessnz-mapper-004
    // LoRaWAN NwkSKey, network session key
//    static const u1_t PROGMEM NWKSKEY[16] = { 0xFC, 0x59, 0xF8, 0x21, 0x70, 0x0B, 0x58, 0xC4, 0xBE, 0x1C, 0xF4, 0x0A, 0xE3, 0x91, 0x16, 0xA3 };
    // LoRaWAN AppSKey, application session key
//    static const u1_t PROGMEM APPSKEY[16] = { 0x65, 0xCC, 0x92, 0x93, 0x2F, 0xB0, 0x8C, 0x19, 0x17, 0x02, 0xBE, 0x38, 0xC0, 0xA0, 0x53, 0x8D };
    // LoRaWAN end-device address (DevAddr)
    // This has to be unique for every node
//    static const u4_t DEVADDR = 0x260D17FA;

    
    // unlessnz-mapper-005
    // LoRaWAN NwkSKey, network session key
//    static const u1_t PROGMEM NWKSKEY[16] = { 0x85, 0x6C, 0xFE, 0xF5, 0x4A, 0xCC, 0xE8, 0x85, 0xCB, 0x95, 0xC5, 0xDA, 0x19, 0x61, 0xA8, 0x3D };
    // LoRaWAN AppSKey, application session key
//    static const u1_t PROGMEM APPSKEY[16] = { 0xC6, 0xD3, 0xB9, 0x46, 0x15, 0x23, 0x7A, 0x4C, 0xA9, 0xDD, 0x87, 0xC1, 0xF0, 0x16, 0x82, 0x78 };
    // LoRaWAN end-device address (DevAddr)
    // This has to be unique for every node
//    static const u4_t DEVADDR = 0x260D43E4;

    // unlessnz-mapper-006
    // LoRaWAN NwkSKey, network session key
//    static const u1_t PROGMEM NWKSKEY[16] = { 0x79, 0x13, 0x91, 0x48, 0xBC, 0xD5, 0xF5, 0x53, 0xF6, 0x43, 0x4E, 0x75, 0x72, 0x76, 0x34, 0xFD };
    // LoRaWAN AppSKey, application session key
//    static const u1_t PROGMEM APPSKEY[16] = { 0xC6, 0xD3, 0xB9, 0x46, 0x15, 0x23, 0x7A, 0x4C, 0xA9, 0xDD, 0x87, 0xC1, 0xF0, 0x16, 0x82, 0x78 };
    // LoRaWAN end-device address (DevAddr)
    // This has to be unique for every node
//    static const u4_t DEVADDR = 0x260D282A;


    // unlessnz-mapper-007
    // LoRaWAN NwkSKey, network session key
    static const u1_t PROGMEM NWKSKEY[16] = { 0x67, 0xE3, 0x5A, 0xEC, 0xA0, 0x16, 0x07, 0xDA, 0x9E, 0x54, 0xE4, 0x1B, 0x0D, 0xAD, 0xC0, 0x32 };
    // LoRaWAN AppSKey, application session key
    static const u1_t PROGMEM APPSKEY[16] = { 0xB7, 0xF5, 0x29, 0x5F, 0x45, 0x2F, 0xE9, 0xBF, 0x80, 0x55, 0xC3, 0x3B, 0x91, 0x32, 0x8C, 0x23 };
    // LoRaWAN end-device address (DevAddr)
    // This has to be unique for every node
    static const u4_t DEVADDR = 0x260D0A8D;

#endif

#ifdef USE_OTAA

    // This EUI must be in little-endian format, so least-significant-byte (lsb)
    // first. When copying an EUI from ttnctl output, this means to reverse
    // the bytes. For TTN issued EUIs the last bytes should be 0x00, 0x00,
    // 0x00.
    static const u1_t PROGMEM APPEUI[8]  = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    // This should also be in little endian format (lsb), see above.
    // Note: You do not need to set this field, if unset it will be generated automatically based on the device macaddr
    static u1_t DEVEUI[8]  = { 0xFF, 0xFE, 0x60, 0xC0, 0xF7, 0xC4, 0x0A, 0x24 };

    // This key should be in big endian format (msb) (or, since it is not really a
    // number but a block of memory, endianness does not really apply). In
    // practice, a key taken from ttnctl can be copied as-is.
    // The key shown here is the semtech default key.
    static const u1_t PROGMEM APPKEY[16] = { 0x9A, 0xA2, 0xDB, 0x5B, 0x30, 0x3F, 0x12, 0xD3, 0xBA, 0xF6, 0x45, 0xD5, 0xBB, 0xC6, 0x72, 0x06 };

#endif
